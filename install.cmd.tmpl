@   echo off

:main /? | [/v] [/n] [/clean] [prefix directory] [/cmd-lib directory]

:: = DESCRIPTION
:: =   Installs !cfg_PACKAGE!.
:: =
:: = OPTIONS
:: =   /v        Be verbose. Repeat for extra verbosity.
:: =   /n        Dry-run. Do not install, just show commands.
:: =   /clean    Remove files generated by !PROG_NAME! and configure.
:: =   /prefix   Name of directory to install !cfg_PACKAGE! in.
:: =             Default is !cfg_prefix!.
:: =   /cmd-lib  Directory with cmd-lib.
:: =             Default is !cfg_cmdlib!.

:: @author Jan Bruun Andersen
:: @version @(#) Version: 2015-12-10

    verify 2>NUL: other
    setlocal EnableExtensions
    if ErrorLevel 1 (
	echo Error - Unable to enable extensions.
	goto :EOF
    )

    if /i "%~1" == "/trace" shift /1 & prompt $G$G & echo on

:defaults
    set "cfg_PACKAGE=@PACKAGE@"
    set "cfg_prefix=@PREFIX@"
    set "cfg_cmdlib=@CMDLIB@"

    set "show_help=false"
    set "verbosity=0"
    set "dry_run=false"
    set "action=install"
    set "prefix=%cfg_prefix%"
    set "cmdlib=%cfg_cmdlib%"

    set "cnt_mkdir=0"
    set "cnt_copy=0"

:getopts
    if /i "%~1" == "/?"		set "show_help=true"	& shift /1		& goto :getopts

    if /i "%~1" == "/v"		set /a "verbosity+=1"	& shift /1		& goto :getopts
    if /i "%~1" == "/n"		set "dry_run=true"	& shift /1		& goto :getopts
    if /i "%~1" == "/clean"	set "action=clean"	& shift /1		& goto :getopts
    if /i "%~1" == "/prefix"	set "prefix=%~2"	& shift /1 & shift /1	& goto :getopts
    if /i "%~1" == "/cmd-lib"	set "cmdlib=%~2"	& shift /1 & shift /1	& goto :getopts

    for %%F in (cl_init.cmd) do if "" == "%%~$PATH:F" set "PATH=%cmdlib%;%PATH%"
    call cl_init "%~dpf0" || (echo Failed to initialise cmd-lib. & goto :exit)

    set "char1=%~1"
    set "char1=%char1:~0,1%"
    if "%char1%" == "/" (
	echo Unknown option - %1.
	echo.
	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if "%show_help%" == "true" call cl_help "%PROG_FULL%" & goto :EOF

    if not "%~1" == "" (
	echo Extra argument - %1.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if not defined prefix (
	echo /prefix directory not defined.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if 0%verbosity% geq 2 (
	echo PACKAGE     = "%cfg_PACKAGE%"
	echo dry_run     = "%dry_run%"
	echo action      = "%action%"
	echo prefix      = "%prefix%"
	echo cmdlib      = "%cmdlib%"
	echo.
	if 0%verbosity% geq 3 call cl_dump_cfg /fullname & echo.
    )

    rem .----------------------------------------------------------------------
    rem | This is where the real fun begins!
    rem '----------------------------------------------------------------------

    call :do_%action%

    goto :exit
goto :EOF

:do_install
    if not exist "%cfg_prefix%"	       call :mkdir "%cfg_prefix%"	|| goto :exit
    for %%F in (build\src\*.cmd)    do call :copy "%%F" "%cfg_prefix%"	|| goto :exit

    if 0%cnt_mkdir% gtr 0 echo Directories created: %cnt_mkdir%
    if 0%cnt_copy%  gtr 0 echo Files copied:        %cnt_copy%

    goto :exit
goto :EOF

:do_clean
    rem configure /clean will rmove 'install.bat' (that is us!) causing an
    rem error when control is returned to ... the non-existing 'install.bat'.
    rem But this trick with 'goto' (see http://forum.script-coding.com/viewtopic.php?id=9050
    rem and http://www.dostips.com/forum/viewtopic.php?f=3&t=6491) works by
    rem
    rem   1) Causing 'install.bat' to terminate in error, but
    rem   2) Remembers that it needs to execute the 'configure /clean' command.
    rem
    rem As long as it is the last thing we do, it will work.

    (goto 2>NUL:) & configure /clean
:goto :EOF

:mkdir dir
    if "%dry_run%" == "true" echo mkdir "%~1" & goto :EOF

    if 0%verbosity% geq 1 echo Creating directory "%~1".
    mkdir "%~1" && (
	set /a "cnt_mkdir+=1"
    )
goto :EOF

:copy file dst-dir
    if "%dry_run%" == "true" echo copy "%~1" "%~2" & goto :EOF

    if 0%verbosity% geq 1 echo Copying "%~1" to "%~2".
    copy "%~1" "%~2" >NUL: && (
	set /a "cnt_copy+=1"
    ) || (
	echo ERROR - Failed to copy "%~1" to "%~2".
	copy "%~1" "%~2"
	goto :exit
    ) >&2
goto :EOF

rem .--------------------------------------------------------------------------
rem | Displays a selection of variables belonging to this script.
rem | Very handy when debugging.
rem '--------------------------------------------------------------------------
:dump_variables
    echo =======
    echo cwd            = "%CD%"
    echo tmp_dir        = "%tmp_dir%"
    echo.
    echo show_help      = "%show_help%"
    echo verbosity      = "%verbosity%"
    echo dry_run        = "%dry_run%"
    echo action         = "%action%"
    echo prefix         = "%prefix%"
    echo cmdlib         = "%cmdlib%"
    echo.
    echo cnt_mkdir      = "%cnt_mkdir%"
    echo cnt_copy       = "%cnt_copy%"
    echo.
    call cl_dump_cfg /fullname

    if defined tmp_dir if exist "%tmp_dir%\" (
	echo.
	dir %tmp_dir%
    )

    echo =======
goto :EOF

rem ----------------------------------------------------------------------------
rem Sets ErrorLevel and exit-status. Without a proper exit-status tests like
rem 'command && echo Success || echo Failure' will not work.
rem
rem OBS: NO commands must follow the call to %ComSpec%, not even REM-arks,
rem      or the exit-status will be destroyed. However, null commands like
rem      labels (or ::) is okay.
rem ----------------------------------------------------------------------------
:no_error
    time >NUL: /t	& rem Set ErrorLevel = 0.
    goto :exit
:error_exit
    verify 2>NUL: other	& rem Set ErrorLevel = 1.
:exit
    %ComSpec% /c exit %ErrorLevel%

:: vim: set filetype=dosbatch tabstop=8 softtabstop=4 shiftwidth=4 noexpandtab:
:: vim: set foldmethod=indent
