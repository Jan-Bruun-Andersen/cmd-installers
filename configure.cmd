@   echo off

:main /? | [/v] [/clean] | [/prefix directory] [/cmd-lib directory]

:: = DESCRIPTION
:: =   Configures !cfg_PACKAGE!.
:: =
:: = OPTIONS
:: =   /v        Be verbose. Repeat for extra verbosity.
:: =   /clean    Remove files generated by !PROG_NAME!.
:: =   /prefix   Name of directory to install !cfg_PACKAGE! in.
:: =             Default is !prefix!.
:: =   /cmd-lib  Directory with cmd-lib.
:: =             Default is !cmdlib!.

:: @author Jan Bruun Andersen
:: @version @(#) Version: 2015-12-07

    verify 2>NUL: other
    setlocal EnableExtensions
    if ErrorLevel 1 (
	echo Error - Unable to enable extensions.
	goto :EOF
    )

    if /i "%~1" == "/trace" shift /1 & prompt $G$G & echo on

:defaults
    set "show_help=false"
    set "verbosity=0"
    set "prefix=%UserProfile%\LocalTools"
    set "cmdlib=%prefix%\cmd-lib.lib"
    set "action=subst"

    set "PROG_CFG=%~dpn0.dat"
    call :read_cfg "%PROG_CFG%" PACKAGE || goto :error_exit
    set "template_files=install.cmd.tmpl"

:getopts
    if /i "%~1" == "/?"		set "show_help=true"	& shift /1		& goto :getopts

    if /i "%~1" == "/v"		set /a "verbosity+=1"	& shift /1		& goto :getopts
    if /i "%~1" == "/clean"	set "action=clean"	& shift /1		& goto :getopts
    if /i "%~1" == "/prefix"	set "prefix=%~2"	& shift /1 & shift /1	& goto :getopts
    if /i "%~1" == "/cmd-lib"	set "cmdlib=%~2"	& shift /1 & shift /1	& goto :getopts

    rem cl_init needs to be here, after setting 'cmdlib'.
    for %%F in (cl_init.cmd) do if "" == "%%~$PATH:F" set "PATH=%cmdlib%;%PATH%"
    call cl_init "%~dpf0" || (echo Failed to initialise cmd-lib. & goto :exit)

    set "char1=%~1"
    set "char1=%char1:~0,1%"
    if "%char1%" == "/" (
	echo Unknown option - %1.
	echo.
	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if "%show_help%" == "true" call cl_help "%PROG_FULL%" & goto :EOF

    if not "%~1" == "" (
	echo Extra argument - %1.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if not defined prefix (
	echo /prefix directory not defined.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if 0%verbosity% geq 2 (
	echo action      = "%action%"
	echo prefix      = "%prefix%"
	echo cmdlib      = "%cmdlib%"
	call :dump_cfg 11
    )

    rem .----------------------------------------------------------------------
    rem | This is where the real fun begins!
    rem '----------------------------------------------------------------------

    goto :do_%action%
    :do_subst
	setlocal EnableDelayedExpansion
	for %%T in (%template_files%) do (
	    call cl_basename %%T .tmpl
	    set "real_file=!_basename!"
	    if 0%verbosity% geq 1 echo Creating "!real_file!" from "%%T".
	    call cl_token_subst "%%T" "!real_file!" ^
		PACKAGE=%cfg_PACKAGE% ^
		DST_DIR="%prefix%" ^
		CMD_LIB="%cmdlib%"
	)
	endlocal
	goto :done
    :do_clean
	setlocal EnableDelayedExpansion
	for %%T in (%template_files%) do (
	    call cl_basename %%T .tmpl
	    set "real_file=!_basename!"
	    if exist "!real_file!" (
		if 0%verbosity% geq 1 echo Deleting "!real_file!".
		del "!real_file!"
	    )
	)
	endlocal
	goto :done
    :done

    goto :exit
goto :EOF

rem .--------------------------------------------------------------------------
rem | Reads configuration values and defines configuration variables.
rem |
rem | The configuration file is a simple text file, where lines starting
rem | with a # is treated as a comment. Everything else should be simple
rem | assignments, e.g.
rem |
rem |   PACKAGE=cmd-lib
rem |
rem | Each value will be assigned to a variable named cfg_<NAME>.
rem |
rem | @param config-file  Name of configuration file.
rem | @param req-value    Name of required configuration values.
rem '--------------------------------------------------------------------------
:read_cfg config-file [req-value ...]
    if not exist "%~1" (
	echo>&2 ERROR - Configuration file "%~1" not found.
	exit /b 1
    )

    for /F "usebackq eol=# tokens=1,* delims==" %%V in ("%~1") do set cfg_%%V=%%W

    for %%V in (%2 %3 %4 %5 %6 %7 %7 %9) do (
	if not defined cfg_%%V (
	    echo>&2 ERROR - Configuration value "%%V" is missing. Check "%~1".
	    exit /b 1
	)
    )
goto :EOF

rem .--------------------------------------------------------------------------
rem | Displays configuration values (variables with prefix 'cfg_') in two
rem | columns:
rem |
rem |   cfg_VARNAME    = "variable-value"
rem |
rem | @param column1-size  Max size of name column.
rem '--------------------------------------------------------------------------
:dump_cfg column1-size
    setlocal EnableDelayedExpansion

    set csize=%~1

    set "rpad="
    for /L %%L in (1,1,%csize%) do set "rpad=!rpad! "

    for /F "usebackq delims== tokens=1,*" %%V in (`set cfg_`) do (
	set "V=%%V%rpad%"
	set "V=!V:~0,%csize%!
	echo !V! = "%%W"
    )
    endlocal
goto :EOF

rem .--------------------------------------------------------------------------
rem | Displays a selection of variables belonging to this script.
rem | Very handy when debugging.
rem '--------------------------------------------------------------------------
:dump_variables
    echo =======
    echo cwd            = "%CD%"
    echo tmp_dir        = "%tmp_dir%"
    echo.
    echo show_help      = "%show_help%"
    echo verbosity      = "%verbosity%"
    echo action         = "%action%"
    echo prefix         = "%prefix%"
    echo cmdlib         = "%cmdlib%"

    call :dump_cfg 14

    if defined tmp_dir if exist "%tmp_dir%\" (
	echo.
	dir %tmp_dir%
    )

    echo =======
goto :EOF

rem ----------------------------------------------------------------------------
rem Sets ErrorLevel and exit-status. Without a proper exit-status tests like
rem 'command && echo Success || echo Failure' will not work,
rem
rem OBS: NO commands must follow the call to %ComSpec%, not even REM-arks,
rem      or the exit-status will be destroyed. However, null commands like
rem      labels (or ::) is okay.
rem ----------------------------------------------------------------------------
:no_error
    time >NUL: /t	& rem Set ErrorLevel = 0.
    goto :exit
:error_exit
    verify 2>NUL: other	& rem Set ErrorLevel = 1.
:exit
    %ComSpec% /c exit %ErrorLevel%

:: vim: set filetype=dosbatch tabstop=8 softtabstop=4 shiftwidth=4 noexpandtab:
:: vim: set foldmethod=indent
