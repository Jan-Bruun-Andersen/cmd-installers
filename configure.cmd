@   echo off

:main /? | [/v] [/clean] | [/prefix directory] [/cmd-lib directory]

:: = DESCRIPTION
:: =   !PROG_NAME! - configures cmd-installers.
:: =
:: = OPTIONS
:: =   /v        Be verbose. Repeat for extra verbosity.
:: =   /clean    Remove files generated by !PROG_NAME!.
:: =   /prefix   Name of directory to install !PACKAGE! in.
:: =             Default is !prefix!.
:: =   /cmd-lib  Directory with cmd-lib.
:: =             Default is !cmdlib!.

:: @author Jan Bruun Andersen
:: @version @(#) Version: 2015-12-05

    verify 2>NUL: other
    setlocal EnableExtensions
    if ErrorLevel 1 (
	echo Error - Unable to enable extensions.
	goto :EOF
    )

    if /i "%~1" == "/trace" shift & prompt $G$G & echo on

:defaults
    set "PROG_FULL=%~f0"
    set "PACKAGE=cmd-installers"

    set "show_help=false"
    set "verbosity=0"
    set "prefix=%UserProfile%\LocalTools"
    set "cmdlib=%prefix%\cmd-lib.lib"
    set "action=configure"

:getopts
    if /i "%~1" == "/?"		set "show_help=true"	& shift		& goto :getopts

    if /i "%~1" == "/v"		set /a "verbosity+=1"	& shift		& goto :getopts
    if /i "%~1" == "/clean"	set "action=clean"	& shift		& goto :getopts
    if /i "%~1" == "/prefix"	set "prefix=%~2"	& shift & shift	& goto :getopts
    if /i "%~1" == "/cmd-lib"	set "cmdlib=%~2"	& shift & shift	& goto :getopts

    for %%F in (cl_init.cmd) do if "" == "%%~$PATH:F" set "PATH=%cmdlib%;%PATH%"
    call cl_init "%PROG_FULL%" "%~1" || (echo Failed to initialise cmd-lib. & goto :exit)

    set "char1=%~1"
    set "char1=%char1:~0,1%"
    if "%char1%" == "/" (
	echo Unknown option - %1.
	echo.
	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if "%show_help%" == "true" call cl_help "%PROG_FULL%" & goto :EOF

    if not "%~1" == "" (
	echo Extra argument - %1.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if not defined prefix (
	echo /prefix directory not defined.
	echo.
    	call cl_usage "%PROG_FULL%"
	goto :error_exit
    )

    if 0%verbosity% geq 2 (
	echo action  = %action%
	echo prefix  = %prefix%
	echo cmdlib  = %cmdlib%
	echo.
    )

    rem .----------------------------------------------------------------------
    rem | This is where the real fun begins!
    rem '----------------------------------------------------------------------

    goto :%action%
:configure
    call cl_token_subst install.cmd.tmpl install.cmd PROG_NAME=install DST_DIR="%prefix%" CMD_LIB="%cmdlib%"
    goto :exit
:clean
    for %%F in (install.cmd) do (
	if 0%verbosity% geq 1 echo Deleting %%F.
	if exist "%%F" del "%%F"
    )
    goto :exit
goto :EOF

rem .--------------------------------------------------------------------------
rem | Displays a selection of variables belonging to this script.
rem | Very handy when debugging.
rem '--------------------------------------------------------------------------
:dump_variables
    echo =======
    echo cwd            = "%CD%"
    echo tmp_dir        = "%tmp_dir%"

    echo show_help      = "%show_help%"
    echo verbosity      = "%verbosity%"
    echo action         = "%action%"
    echo prefix         = "%prefix%"
    echo cmdlib         = "%cmdlib%"

    if defined tmp_dir if exist "%tmp_dir%\" (
	echo.
	dir %tmp_dir%
    )

    echo =======
goto :EOF

rem ----------------------------------------------------------------------------
rem Sets ErrorLevel and exit-status. Without a proper exit-status tests like
rem 'command && echo Success || echo Failure' will not work,
rem
rem OBS: NO commands must follow the call to %ComSpec%, not even REM-arks,
rem      or the exit-status will be destroyed. However, null commands like
rem      labels (or ::) is okay.
rem ----------------------------------------------------------------------------
:no_error
    time >NUL: /t	& rem Set ErrorLevel = 0.
    goto :exit
:error_exit
    verify 2>NUL: other	& rem Set ErrorLevel = 1.
:exit
    %ComSpec% /c exit %ErrorLevel%

:: vim: set filetype=dosbatch tabstop=8 softtabstop=4 shiftwidth=4 noexpandtab:
:: vim: set foldmethod=indent
